{"version":3,"sources":["Components/Square.js","Components/Board.js","Components/Game.js","serviceWorker.js","index.js"],"names":["Square","props","Button","variant","className","onClick","value","Board","i","this","squares","Container","Row","renderSquare","Component","Game","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","size","jumpTo","handleClick","lines","a","b","c","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79b0fe90.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nexport default function Square(props) {\r\n  return (\r\n    <Button variant=\"secondary outline-dark\" className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </Button>\r\n  );\r\n}","import React, {Component} from \"react\";\r\nimport Square from \"./Square\";\r\nimport {Container, Row} from \"react-bootstrap\";\r\n\r\nexport default class Board extends Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container >   \r\n        <Row>\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </Row>\r\n        <Row>\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </Row>\r\n        <Row>\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport Board from \"./Board\";\r\nimport {Container, Button } from \"react-bootstrap\";\r\n\r\nexport default class Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        \"Go to move #\" + move :\r\n        \"Restart\";\r\n      return (\r\n        <span key={move}>\r\n          <Button size=\"sm\" variant=\"outline-dark\" onClick={() => this.jumpTo(move)}>{desc}</Button>\r\n        </span>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = winner + \" is the Winner!\";\r\n    } else {\r\n      status = \"Next player is \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <Container className=\"game\">\r\n        <div className=\"gameBoard\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"gameInfo\">\r\n          <div className=\"playerStatus\">{status}</div>\r\n          <span className=\"playerMoves\">{moves}</span>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n}\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Game from './Components/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}